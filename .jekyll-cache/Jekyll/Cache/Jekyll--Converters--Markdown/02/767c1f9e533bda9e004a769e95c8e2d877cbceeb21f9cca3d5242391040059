I"≥<h2 id="sql-tips-for-fast-big-data-queries">SQL tips for fast big data queries</h2>

<p>Querying tables with SQL is the first part of any data science project, sometimes, it can be the slowest one too. To boost the performance of the extraction and loading, I‚Äôm writing down some tips to run queries fast.</p>

<p>I received these tips from my manager, after she identified them in  queries that took minutes to run. As a rule of thumb, if a query is taking over 30s, go back and find if there is any of the following mistakes in your SQL.</p>

<p><br /></p>

<p>Common mistakes:</p>
<ol>
  <li><a href="#t1">SELECT * FROM table</a></li>
  <li><a href="#t3">Cartesian Joins</a></li>
  <li><a href="#t3">Big tables</a></li>
  <li><a href="#t4">DISTINCT</a></li>
  <li><a href="#t5">WITH big tables</a></li>
</ol>

<p><br /></p>

<hr />
<h3 id="select--from-table-">SELECT * FROM table <a name="t1"></a></h3>

<p>Today, data is stored in  big-data warehouses that use columnar-store tables, like Redshift, Hadoop and Big-Query. In this type of storage it is more efficient to access all rows from a column, than to access all columns for a single row. For this reason, avoid at all cost selecting all columns. Instead, choose only the fields that interest you.</p>

<p>‚õîÔ∏è <code class="language-plaintext highlighter-rouge">SELECT * FROM table</code></p>

<p>‚úÖ <code class="language-plaintext highlighter-rouge">SELECT col1, col2 FROM table</code></p>

<p><strong>Notes on column oriented and row oriented databases</strong>:</p>

<p>Columnar-store is the opposite of more traditional row oriented data stores. In row-store, information is saved and retrieved one row at a time, they are easy to read and write, but it‚Äôs not easy to aggregate or fetch all rows at the same time. This is the typical case of a ‚Äústudents database‚Äù in which we may want to see the data of a particular individual, like in many SQL tutorials.</p>

<p>Columnar oriented data store is typically used for OLAP (online analytical processing) applications. Here we would be mostly interested in performing calculations over fields, for example, fetching the amount of multiple transactions and calculating the mean.</p>

<p>Ultimately, in both situation a table looks exactly the same, but its performance is different depending on the types of query we ran against it. For row-oriented storage, we could easily see all the info for a given unit, and in column-oriented storage, we can process aggregates over columns very fast. <a href="https://medium.com/bluecore-engineering/deciding-between-row-and-columnar-stores-why-we-chose-both-3a675dab4087#:~:text=In%20row%20oriented%20databases%2C%20these,data%20is%20read%20at%20once.">Further reading.</a></p>

<p><br /></p>

<h3 id="cartesian-joins-">Cartesian Joins <a name="t2"></a></h3>
<p>Cartersian joins, aka cross joins, return all the possible combinations from the records of two tables. Unless you are designing an experiment, or building a view or another table from scrach, you will never use this join. In some SQL editors, this is the default join when you don‚Äôt specify otherwise, so always remember to write it down. Review all the joins and don‚Äôt use more than <code class="language-plaintext highlighter-rouge">INNER JOIN</code> and <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>. There‚Äôs no need for any other, not even right joins.</p>

<p>‚õîÔ∏è <code class="language-plaintext highlighter-rouge">SELECT t1.col1, t2.col2 FROM table1 as t1, table2 as t2</code></p>

<p>‚úÖ <code class="language-plaintext highlighter-rouge">SELECT t1.col1, t2.col2 FROM table1 as t1 LEFT JOIN table2 as t2 ON t1.id = t2.t1_id</code></p>

<p><br /></p>

<h3 id="big-tables-">Big tables <a name="t3"></a></h3>

<p>Talking about joins: don‚Äôt join big tables with one another. It‚Äôs better to do a two step process: first reduce each original table through a sub-queries, and then join these subqueries. Although it looks more complex to have nested queries, it will save time in the long run since the runtime will decrease significantly.</p>

<p>Instead of:</p>

<p>‚õîÔ∏è</p>
<pre><code>
SELECT                                             
  c.id,                                            
  c.age,                                           
  t.amt                                            
FROM      customers     c                      
LEFT JOIN transactions  t on c.id = t.customer_id
</code></pre>

<p>‚úÖ</p>
<pre><code>SELECT *                               
FROM      (SELECT id, age FROM customers) c        
LEFT JOIN (SELECT cust_id, amt FROM transactions) t on c.id = t.cust_id
</code></pre>

<h3 id="distinct">DISTINCT<a name="t4"></a></h3>
<h3 id="with-big-tables">WITH big tables<a name="t5"></a></h3>
:ET