I"Ω<p>Este c√≥digo resumen se lo hice a una amiga para ayudarla en su primera entrevista de trabajo, apenas terminamos de estudiar la carrera, all√° por 2017. Sirve de ayuda para limpiar y analizar datos en R en menos de 10 pasos, con un conjunto de datos inventado para revisar que funcione :)
<a name="p0"></a> Cada vez que empiezo un proyecto nuevo en R, abro esta gu√≠a txt para no tener que buscar ni escribir las mismas funciones que uso cada vez. Comparto el c√≥digo en
<a href="/download/template-analisis-datos-R-codigo.txt" class="download">archivo txt </a> y la <a href="/download/base_ejemplo.csv" class="download">base csv de ejemplo</a> .</p>

<h3 id="pasos">Pasos:</h3>

<ol>
  <li><a href="#p1"><strong>Directorio</strong></a> - Elegir un directorio (carpeta) para tu c√≥digo o verificar que est√°s en el correcto.</li>
  <li><a href="#p2"><strong>Abrir</strong></a> un conjunto de datos .csv en R como un dataframe (df).</li>
  <li><a href="#p3"><strong>Dimensionar</strong></a> la forma y tama√±o del df, columnas, tipos de variables y estad√≠sticas resumen para tener una idea de tus datos.</li>
  <li><a href="#p4"><strong>Seleccionar</strong></a> subgrupos de variables y/o filas.</li>
  <li><a href="#p5"><strong>Cambiar tipos</strong></a> de variable (de factor a texto, de decimal a entero).</li>
  <li><a href="#p6"><strong>Filtrar</strong></a> datos por condiciones o reglas.</li>
  <li><a href="#p7"><strong>Limpiar</strong></a> duplicados o imputar valores perdidos</li>
  <li><a href="#p8"><strong>Visualizar</strong></a> datos agregados y gr√°ficos.</li>
  <li><a href="#p9"><strong>Exportar</strong></a> el dataframe como .csv</li>
</ol>

<h3 id="c√≥digo">C√≥digo:</h3>

<pre>
# 1 DIRECTORIO<a name="p1"></a>  

# getwd() para ver el directorio en el que est√°s ahora
# setwd() para cambiarlo si no era el correcto
# list.files() imprime lo que hay adentro

getwd()
setwd("/Users/camilaburne/folder")
list.files()

</pre>

<p>Al correr list.files() pod√©s ver los archivos en tu directorio. Est√°n ordenados y pod√©s acceder al primer elemento con <code class="language-plaintext highlighter-rouge">list.files()[1]</code>:</p>

<p><img src="/images/template-analisis-datos-R-p1.png" class="postimg" /></p>

<pre>
# 2 ABRIR<a name="p2"></a>    

# Abrir archivos que est√©n dentro del directorio
# poniendo el nombre en donde dice 'file'
# read.csv(file, header = TRUE, sep = ",")

df01 &lt;- read.csv("base_ejemplo.csv")
df02 &lt;- read.csv(list.files()[1])

</pre>

<p>En el panel de la derecha, una vez que import√°s los archivos con <code class="language-plaintext highlighter-rouge">read_csv</code>, te aparecen el nombre y dimensi√≥n de cada objeto.</p>

<p><img src="/images/template-analisis-datos-R-p2.png" class="postimg" /></p>

<pre>
# 3 DIMENSIONAR<a name="p3"></a>  

# Funciones para ver qu√© son y qu√© tienen los df
# dim() devuelve el nro de filas y columnas
# name() muestra las columnas
# head() y tail() las primeras y √∫lt filas

dim(df01)
names(df01)
head(df01, 10)
tail(df01,  2)

# Funciones para ver qu√© son y qu√© tienen las variables
# typeof() te dice qu√© tipo de objeto es

typeof(df01$grupo)
typeof(df01$gasto)
typeof(df01$nombre)

# Funciones para ver sus estad√≠sticas resumen
# mean() y median() para ver promedio y mediana
# range() y sd() para ver rango y dispersi√≥n
# quantile() es para ver los percentiles

mean(df01$gasto)
median(df01$gasto)

range(df01$gasto)
sd(df01$gasto)

quantile(df01$gasto, 0.5)
summary(df01)

</pre>

<p>Con names() se ve que el dataframe muestra valores de compra y venta, para ciertos nombres, grupos y mes. Una variable que puede analizarse es gasto, de la cual se calcula el promedio y los percentiles 25%, 50%, 75%, 90%.</p>

<p><img src="/images/template-analisis-datos-R-p3.png" class="postimg" /></p>

<pre>
# 4 SELECCIONAR<a name="p4"></a>    

# Seleccionar una variable solita, con $ o [ ]
df01$nombre
df01[ ,'nombre']

# Seleccionar un par de filas y de columnas con [ ]
# y pasando el nombre de columnas y n√∫mero de filas
df01[1:10, ]
df01[c(1,10,20,30), c('nombre','gasto')]
df01[c(1,10,20,30), c(1,2)]

</pre>

<pre>
# 5 CAMBIAR TIPOS<a name="p5"></a>  

# Funciones para cambiar el tipo de variable
df01$nombre &lt;- as.character(df01$nombre)
df01$gasto  &lt;- as.numeric(df01$gasto)
df01$gasto_redondo &lt;- as.integer(df01$gasto)

</pre>

<pre>
# 6 FILTRAR<a name="p6"></a>  

# Seleccionar filas usando filtros. Operadores √∫tiles:
#  &amp;     cumple TODAS las conduciones (Y)
#  |     cumple AL MENOS una condicion (O)
#  %in%  significa contenido en  

df01[df01$gasto &lt; 70, ]
df01[df01$gasto &lt; 100  &amp; df01$grupo==1, ]

df01[!(df01$mes=='enero'),]
df01[(df01$mes=='febrero' | df01$mes=='marzo'),]

df01[df01$grupo %in% c(1,2,3), ]

grup12 = c(1,2)
vars   = c(1,4)
df01[df01$grupo %in% grup12, vars]

# Una vez que te interesa un subgrupo que filtraste
# Conviene guardarlo en un df o variable nueva

gastos    &lt;- as.data.frame(df01$gasto)
meses     &lt;- unique(df01$mes)
df01enero &lt;- df01[df01$mes=='enero',]

</pre>

<p>El operador <code class="language-plaintext highlighter-rouge">!</code> significa ‚Äúque no sea‚Äù, en este caso si se filtran meses que no son ‚Äòenero‚Äô se ven los restantes (febrero, marzo).</p>

<p><img src="/images/template-analisis-datos-R-p6.png" class="postimg" /></p>

<pre>
# 7 LIMPIAR<a name="p7"></a>  

# is.na() te dice TRUE si hay datos perdidos
# Para reemplazarlos:

df01$pct[is.na(df01$pct)] = 0

# duplicated() devuelve TRUE si hay repetidos
# Para encontrar duplicados:
df01$doble &lt;- duplicated(df01)
table(df01$doble)

# Crear df nuevo sin duplicados
df01unico &lt;- subset(df01, df01$doble==FALSE)

nrow(df01)
nrow(df01unico)

</pre>

<p>La funci√≥n duplicated() devuelve <code class="language-plaintext highlighter-rouge">TRUE</code> si la fila est√° repetida, y <code class="language-plaintext highlighter-rouge">FALSE</code> si es √∫nica. Con subset se puede obtener el subgrupo de filas que no est√°n repetidas, generando un dataframe con menos filas que el original.</p>

<p><img src="/images/template-analisis-datos-R-p7.png" class="postimg" /></p>

<pre>
# 8 VISUALIZAR<a name="p8"></a>  

# Funciones para sacar conteos, porcentajes,
# y graficar scatterplots, gr√°fico de barras, histogramas

table(df01unico$tipo)
prop.table(table(df01unico$tipo))

hist(df01unico$pct, col = 'navyblue', border = 'white')
plot(df01unico$gasto, df01unico$pct, pch=19)
barplot(table(df01unico$grupo))

</pre>

<p>En el panel a la derecha se visualizan los gr√°ficos, ya sea que se hagan con R b√°sico o  ggplot.</p>

<p><img src="/images/template-analisis-datos-R-p8-2.png" class="postimg" /></p>

<p>Los gr√°ficos b√°sicos de R son sencillos pero a√∫n as√≠ tienen varios par√°metros para modificar, c√≥mo main (t√≠tulo), xlab, ylab (nombre de ejes). Al correr <code class="language-plaintext highlighter-rouge">?hist</code>, se ven los par√°metros de esta funci√≥n.</p>

<p><img src="/images/template-analisis-datos-R-p8-1.png" class="postimg" /></p>

<pre>
# 9 EXPORTAR<a name="p9"></a>  

# revisar d√≥nde lo estoy guardando

getwd()
write.csv(df01unico, 'baseok.csv', row.names = F)

</pre>

<p>Con esta gu√≠a se pueden arrancar much√≠simos proyectos de ciencias de datos, ya que entender, organizar, limpiar, resumir, visualizar la informaci√≥n cruda es la parte m√°s importante, la que lleva m√°s tiempo (el 80% al menos!) y la habilidad que le pidieron a mi amiga en su entrevista :) que al final se gan√≥ el puesto y ya lleva +5 a√±os ah√≠.</p>

<p><br />
<br />
<br />
<br />
Volver al <a href="#p0">principio del art√≠culo</a></p>
:ET