I"U<h2 id="run-queries-faster">Run queries faster</h2>

<p>A rule of thumb: if your query takes over a minute to run, there are some improvements that you can do on your code to speed things up:</p>

<p>Things to avoid</p>
<ol>
  <li><a href="#t1"><code class="language-plaintext highlighter-rouge">SELECT * FROM table</code></a></li>
  <li><a href="#t3"><code class="language-plaintext highlighter-rouge">JOINS</code></a></li>
  <li><a href="#t3"><code class="language-plaintext highlighter-rouge">Big tables</code></a></li>
  <li><a href="#t4"><code class="language-plaintext highlighter-rouge">DISTINCT</code></a></li>
  <li><a href="#t5"><code class="language-plaintext highlighter-rouge">WITH big tables</code></a></li>
</ol>

<h3 id="select--from-table-"><code class="language-plaintext highlighter-rouge">SELECT * FROM table</code> <a name="t1"></a></h3>

<p>Today data is stored in Redshift, Hadoop, Big-Query and other big-data warehouses that use columnar-store tables. In this type of storage, accessing many columns is costly, whereas selecting all rows from one column is not. For this reason, avoid at all cost selecting all columns ‚Äì instead, choose the fields we are interested in.</p>

<ul>
  <li>Do:</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">SELECT col1, col2 FROM table</code></p>

<p>Columnar-store is the opposite of more traditional row oriented data stores. In row-store, information is saved and retrieved one row at a time, they are easy to read and write, but it‚Äôs not easy to aggregate or fetch all rows at the same time. This is the typical case of a ‚Äústudents database‚Äù in which we may want to see the data of a particular individual, let‚Äôs say, accessing row one of the following table will give us info of Carl Sagan:</p>

<p>Columnar oriented data store is typically used for OLAP (online analytical processing) applications. Here we would be mostly interested in performing calculations over fields, for example, fetching the Age of multiple objects and calculate it‚Äôs range. We are interested in fetching information in this format:
Ultimately, in both situation a table looks exactly the same, but its performance is different depending on the types of query we ran against it. <a href="https://medium.com/bluecore-engineering/deciding-between-row-and-columnar-stores-why-we-chose-both-3a675dab4087#:~:text=In%20row%20oriented%20databases%2C%20these,data%20is%20read%20at%20once.">Further reading.</a></p>

<h3 id="cartesian-joins-"><code class="language-plaintext highlighter-rouge">Cartesian JOINS</code> <a name="t2"></a></h3>
<p>could be killing the query</p>

<p>This one is simple: review all the joins and don‚Äôt use more than <code class="language-plaintext highlighter-rouge">INNER JOIN</code> and <code class="language-plaintext highlighter-rouge">LEFT JOIN</code>. There‚Äôs no need for any other, not even right joins.</p>

<h3 id="big-tables-"><code class="language-plaintext highlighter-rouge">Big tables</code> <a name="t3"></a></h3>
<p>Talking about joins: don‚Äôt join huge tables with one another. It‚Äôs better to do sub-queries and joining them than using huge tables.</p>

<p>Instead of:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT c.id, c.age, t.amount, t.type  
FROM customers c
LEFT JOIN transactions t on c.id = t.customer_id
</code></pre></div></div>

<p>Do:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT *
FROM (SELECT id, age FROM customers) c
LEFT JOIN (SELECT customer_id, amount, type FROM transactions) t on c.id = t.customer_id
</code></pre></div></div>

<h3 id="distinct"><code class="language-plaintext highlighter-rouge">DISTINCT</code><a name="t4"></a></h3>
<h3 id="with-big-tables-"><code class="language-plaintext highlighter-rouge">WITH big tables</code> <a name="t5"></a></h3>
:ET