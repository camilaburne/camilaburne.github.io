I"m,<p>üößüöß site in construction üößüöß</p>

<p>This post follows a <a href="https://www.kaggle.com/statsfromarg/btc-blockchain-data-exploratory-analysis">notebook I made on Kaggle</a> as an exploratory approach to Bitcoin Blockchain data. The goal of this EDA is to become familiarized with blockchain data structure, and where to find information about blocks, transactions, inputs and output - the main elements of the blockchain.</p>

<p>The highest level are the blocks, blocks are containers of:</p>
<ul>
  <li>a link to the previous block (this is how they are chained)</li>
  <li>metadata about the block itself (size, timestamp)</li>
  <li>transaction data stored in a Merkle Tree structure.</li>
</ul>

<p>The second level are transactions, which are related to a block by the block hash, and contain aggregate information about the amounts sent in a typical bitcoin transaction. Since each transaction can have multiple inputs and outputs, there are two nested tables within transaction table that provide the highest detail of a transaction.</p>

<p>Altogether, there are four tables on Big Query:</p>

<ol>
  <li><a href="#blocks">Blocks</a></li>
  <li><a href="#txns">Transactions</a></li>
  <li><a href="#inputs">Inputs</a></li>
  <li><a href="#outputs">Outputs</a></li>
</ol>

<p><br /></p>

<hr />

<h3 id="connect-to-bigquery">Connect to BigQuery</h3>

<p>I currently use two ways to use BigQuery - kaggle and python. There are plenty of tutorials for python and BigQuery, so here I‚Äôll just share the chunk needed to access it through <a href="https://www.kaggle.com/bigquery/bitcoin-blockchain">kaggle</a>.</p>

<pre>
from google.cloud import bigquery
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

client = bigquery.Client()
</pre>
<p><br /></p>

<h3 id="blocks-table-">Blocks Table <a name="blocks"></a></h3>

<p>Field descriptions <a href="https://github.com/blockchain-etl/bitcoin-etl-airflow/blob/master/dags/resources/stages/enrich/schemas/blocks.json">from the bitcoin-etl-airflow repo</a>.</p>

<ul>
  <li><strong>hash</strong>: Hash of this block</li>
  <li><strong>size</strong>: The size of block data in bytes</li>
  <li><strong>stripped_size</strong>: The size of block data in bytes excluding witness data</li>
  <li><strong>weight</strong>: Three times the base size plus the total size. <a href="https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki">More info.</a></li>
  <li><strong>number</strong>: The number of the block</li>
  <li><strong>version</strong>: Protocol version specified in block header</li>
  <li><strong>merkle_root</strong>: The root node of a Merkle tree, where leaves are transaction hashes</li>
  <li><strong>timestamp</strong>: Block creation timestamp specified in block header</li>
  <li><strong>timestamp_month</strong>: Month of Block creation timestamp specified in block header</li>
  <li><strong>nonce</strong>: Difficulty solution specified in block header</li>
  <li><strong>bits</strong>: Difficulty threshold specified in block header</li>
  <li><strong>coinbase_param</strong>: Data specified in the coinbase transaction of this block</li>
  <li><strong>transaction_count</strong>: Number of transactions included in this block</li>
</ul>

<pre>
<i># Exploring BigQuery-public-data.crypto_bitcoin.blocks table</i>

q_blocks ='''SELECT
             *       
             FROM   `BigQuery-public-data.crypto_bitcoin.blocks`  
             order by timestamp_month
             limit 10
          '''

blocks = client.query(q_blocks).to_dataframe()
blocks.to_csv('blocks_head.csv')
blocks.head()

</pre>

<p><img src="/images/bitcoin_kaggle  1.35.12 PM.png" height="180px" /></p>

<pre>
<i># Aggregating block size and count over months</i>

q_blocks_m ='''SELECT
                timestamp_month
              , count(*)   as n_blocks
              , avg(size)  as mean_size
              , avg(stripped_size)  as mean_stripped_size        
            FROM   `BigQuery-public-data.crypto_bitcoin.blocks`  
            group by 1
            '''

blocks_m = client.query(q_blocks_m).to_dataframe()
blocks_m.to_csv('blocks_size_month.csv')
blocks_m.head()
</pre>

<p><img src="/images/bitcoin_kaggle  1.35.28 PM.png" height="180px" /></p>

<pre>
blocks_m['month'] = blocks_m.timestamp_month.astype(str).str[0:7]
blocks_m = blocks_m.sort_values(by=['month']).copy()
</pre>

<pre>
p = sns.barplot(x = blocks_m['month'], y= blocks_m['n_blocks'], color='teal')
p.set_title('Number of blocks by month', size = 20)
p.set_xticklabels(p.get_xticklabels(), rotation=90, size = 9);

p = sns.barplot(x = blocks_m['month'], y= blocks_m['mean_stripped_size'], color='teal')
p.set_title('Average block stripped size by month', size = 20)
p.set_xticklabels(p.get_xticklabels(), rotation=90, size = 9);
</pre>

<p><img src="/images/bitcoin_kaggle  1.35.55 PM.png" height="280px" />
<br />
<img src="/images/bitcoin_kaggle  1.36.03 PM.png" height="280px" /></p>

<h3 id="transactions-">Transactions <a name="txns"></a></h3>

<p>Exploring Transactions table, ignoring the nested tables inputs and outputs.</p>

<ul>
  <li><strong>hash</strong>: The hash of this transaction</li>
  <li><strong>size</strong>: The size of this transaction in bytes</li>
  <li><strong>virtual_size</strong>: The virtual transaction size (differs from size for witness transactions)</li>
  <li><strong>version</strong>: Protocol version specified in block which contained this transaction</li>
  <li><strong>lock_time</strong>: Earliest time that miners can include the transaction in their hashing of the Merkle root to attach it in the latest block of the blockchain</li>
  <li><strong>block_hash</strong>: Hash of the block which contains this transaction</li>
  <li><strong>block_number</strong>: Number of the block which contains this transaction</li>
  <li><strong>block_timestamp</strong>: Timestamp of the block which contains this transaction</li>
  <li><strong>block_timestamp_month</strong>: Month of the block which contains this transaction</li>
  <li><strong>input_count</strong>: The number of inputs in the transaction</li>
  <li><strong>output_count</strong>: The number of outputs in the transaction</li>
  <li><strong>input_value</strong>: ‚ÄúTotal value of inputs in the transaction</li>
  <li><strong>output_value</strong>: Total value of outputs in the transaction</li>
  <li><strong>is_coinbase</strong>: true if this transaction is a coinbase transaction</li>
  <li><strong>fee</strong>: The fee paid by this transaction</li>
  <li><strong>inputs</strong>: This includes a json formatted field with all the variables in the Inputs table, which is explored later in the notebook.</li>
  <li><strong>outputs</strong>: Also json field with all the outputs, explored later as well.</li>
</ul>

<pre>

trx = """
      SELECT  
     `hash`            as txn_hash
     ,size             as txn_size
     ,version          as txn_version
     ,lock_time        as txn_lock_time
     ,block_hash       as txn_block_hash
     ,block_number     as txn_block_number
     ,block_timestamp  as txn_block_timestamp
     ,input_count      as txn_input_count
     ,input_value      as txn_input_value
     ,output_count     as txn_output_count
     ,output_value     as txn_output_value      
     ,is_coinbase      as txn_is_coinbase
     ,fee              as txn_fee      

    FROM `BigQuery-public-data.crypto_bitcoin.transactions`
    order by block_timestamp
    limit 50

     """

query_job = client.query(trx)
iterator  = query_job.result(timeout=60)
rows      = list(iterator)

# Transform the rows into a nice pandas dataframe
trx = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))
trx.to_csv('transactions_head.csv')
trx.head()

</pre>

<pre>
# Get the hash of first transaction and explore it on blockchain.com
trx.txn_hash[0]
</pre>

<p>Without those nested tables, there‚Äôs no much ‚Äútransaction‚Äù information you can get. For example, for the first transaction, we can see it is_coinbase = True since it‚Äôs the first transaction included in a block, and the output value of 5000000000, in sats, was the 50 BTC reward for processing a block back in 2009. Checking Bitcoin Explorer, using the transaction hash, we can see the same info + some info about output (the address that it was sent to).</p>

<p><strong>Exploring a specific transaction</strong></p>

<p>/*** Use the pizza transaction?
Hash            1318b899852c8ecd4c7ff4c540ea469e36b15f781ca517a94168da72b68e427d
Received Time   2020-02-04 10:18</p>

<p>The above-mentioned transaction was the first one, and involves 50 btc that have never been spent.
To better understand the anatomy of a more typical transaction, let‚Äôs see how bitcoins are spent.</p>

<p>Take for example the hash <code class="language-plaintext highlighter-rouge">4ce18f49ba153a51bcda9bb80d7f978e3de6e81b5fc326f00465464530c052f4</code>. This one has two outputs - one is unspent (available balance for the hodler) and the other one is spent in the transaction with the hash <code class="language-plaintext highlighter-rouge">9a9294fec01d85438d1ecbdfce636b26e896b7a307fd448c3b2e224ef4bf2bae</code>. This one, in turn, also has two outputs, one spent and one unspent. I know this</p>

<pre>
q_anatomy = """
      SELECT  
     `hash`           as txn_hash
     ,block_timestamp as txn_block_tms
     ,input_count     as txn_input_count
     ,input_value     as txn_input_value
     ,i.spent_transaction_hash   as nested_hash  
     ,i.value         as nested_input_value
     ,output_count    as txn_output_count
     ,output_value    as txn_output_value
     ,o.value         as nested_output_value     

     FROM `BigQuery-public-data.crypto_bitcoin.transactions`
     JOIN UNNEST(inputs)  as i
     JOIN UNNEST(outputs) as o
     WHERE `hash` in
     ('4ce18f49ba153a51bcda9bb80d7f978e3de6e81b5fc326f00465464530c052f4'
      ,'9a9294fec01d85438d1ecbdfce636b26e896b7a307fd448c3b2e224ef4bf2bae')

     ORDER BY block_timestamp
     """

query_job = client.query(q_anatomy)
iterator  = query_job.result(timeout=60)
rows      = list(iterator)

# Transform the rows into a nice pandas dataframe
anatomy = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))
anatomy
</pre>

<p><img src="/images/blockhain_data_txn.jpg" class="middleimg" /></p>

<p>Resources:</p>
<ul>
  <li>The internet is full of bitcoin study material. But there‚Äôs nothing close to the book <a href="https://github.com/bitcoinbook/bitcoinbook">Mastering Bitcoin</a></li>
  <li>A quick <a href="https://medium.com/google-cloud/full-relational-diagram-for-bitcoin-public-data-on-google-BigQuery-3c4772af6325">Relational graph</a>  mapping the links among these four tables</li>
  <li>A tutorial to <a href="https://towardsdatascience.com/https-medium-com-nocibambi-getting-started-with-bitcoin-data-on-kaggle-with-python-and-BigQuery-d5266aa9f52b">Getting started with Bitcoin data</a>  on Kaggle with Python and BigQuery</li>
  <li>Some <a href="https://cloud.google.com/blog/products/data-analytics/introducing-six-new-cryptocurrencies-in-BigQuery-public-datasets-and-how-to-analyze-them">queries from Big Query</a>, when they published the blockchain data</li>
  <li><a href="https://github.com/blockchain-etl">Bitcoin ETL repo</a>, the one that‚Äôs dumping btc data on BigQuery</li>
</ul>
:ET